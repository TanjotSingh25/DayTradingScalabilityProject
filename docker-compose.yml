    # pgbouncer:
    #     image: edoburu/pgbouncer
    #     container_name: pgbouncer
    #     restart: always
    #     depends_on:
    #         db:
    #             condition: service_healthy
    #     volumes:
    #         - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
    #         - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    #     environment:
    #         - DB_HOST=db
    #         - DATABASES=authdb=host=db port=5432 user=admin password=adminpassword pool_size=100
    #     ports:
    #         - "6432:6432" # Expose PgBouncer on port 6432
    #     networks:
    #         - backend
    
version: '3.8'
services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "8080:8080"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
            - order_service
            - portfolio_stock_service  # Removed matching_engine_service here -- Combined with Order service now
        networks:
            - backend
    redis:
        image: redis:latest
        container_name: redis_cache
        command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru
        restart: always
        ports:
            - "6381:6379"
        networks:
            - backend
    redis_wallet_cache:
        image: redis:latest
        container_name: redis_wallet_cache
        command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru
        restart: always
        ports:
            - "6382:6379"
        networks:
            - backend

    db1:
        image: postgres:13
        container_name: postgres_db1
        environment:
            POSTGRES_DB: authdb1
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: adminpassword
        ports:
            - "5433:5432"
        volumes:
            - pgdata1:/var/lib/postgresql/data
        networks:
            - backend
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "authdb1"]
            interval: 5s
            timeout: 5s
            retries: 10
        command: [
            "postgres",
            "-c","max_connections=1000",
            "-c","shared_buffers=3GB",
            "-c","work_mem=16MB",
            "-c","effective_cache_size=8GB",
            "-c","synchronous_commit=off",
            "-c","fsync=off"
            ]

    db2:
        image: postgres:13
        container_name: postgres_db2
        environment:
            POSTGRES_DB: authdb2
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: adminpassword
        ports:
            - "5434:5432"
        volumes:
            - pgdata2:/var/lib/postgresql/data
        networks:
            - backend
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "authdb2"]
            interval: 5s
            timeout: 5s
            retries: 10
    db3:
        image: postgres:13
        container_name: postgres_db3
        environment:
            POSTGRES_DB: authdb3
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: adminpassword
        ports:
            - "5435:5432"
        volumes:
            - pgdata3:/var/lib/postgresql/data
        networks:
            - backend
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin", "-d", "authdb3"]
            interval: 5s
            timeout: 5s
            retries: 10

    auth_load_balancer:
        build:
            context: .
            dockerfile: auth_load_balancer/Dockerfile
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
        ports:
            - "5001:5001"
        networks:
            - backend

    auth_service1:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8004:8000"
        restart: always
        depends_on:
            db1:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=db1
            - DB_PORT=5432
            - DB_NAME=authdb1
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service2:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8005:8000"
        restart: always
        depends_on:
            db2:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=db2
            - DB_PORT=5432
            - DB_NAME=authdb2
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    auth_service3:
        build:
            context: .
            dockerfile: AuthenticationService/Dockerfile
        volumes:
            - ./AuthenticationService:/app
        ports:
            - "8006:8000"
        restart: always
        depends_on:
            db3:
                condition: service_healthy
        environment:
            - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:5173
            - DB_HOST=db3
            - DB_PORT=5432
            - DB_NAME=authdb3
            - DB_USER=admin
            - DB_PASSWORD=adminpassword
        networks:
            - backend

    order_service:
        container_name: order_service
        build:
            context: .
            dockerfile: OrderService/Dockerfile
        volumes:
            - ./OrderService:/app
        ports:
            - "5201:5200"
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            # Removed references to matching_engine_service
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

# [REMOVED matching_engine_service completely]

    mongo:
        image: mongo:6.0
        container_name: mongo_db
        restart: always
        ports:
            - "27018:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: adminpassword
        networks:
            - backend
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
            interval: 10s
            timeout: 5s
            retries: 5
        command: ["mongod", "--quiet", "--logpath", "/dev/null"]

    portfolio_stock_service:
        build:
            context: ./PortfolioStockService
        volumes:
            - ./PortfolioStockService:/app
        ports:
            - "5005:5000"
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

networks:
    backend:

volumes:
    pgdata1:
    pgdata2:
    pgdata3:
    mongodb_data: