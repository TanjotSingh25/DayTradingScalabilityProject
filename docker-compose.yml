services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - "9090:8080"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - auth_service1
            - auth_service2
            - auth_service3
            - auth_service4
            - auth_service5
            # - auth_service6
            # - auth_service7
            # - auth_service8
            # - auth_service9
            # - auth_service10
            - order_service1
            # - order_service2
            # - order_service3
            # - order_service4
            # - order_service5
            # - order_service6
            # - order_service7
            # - order_service8
            - matching_engine_service
            - matching_engine_service_2
            - portfolio_stock_service1
            # - portfolio_stock_service2
            # - portfolio_stock_service3
            # - portfolio_stock_service4
        networks:
            - backend

    redis:
        image: redis:latest
        container_name: redis_cache
        command: redis-server --maxmemory 200mb --maxmemory-policy allkeys-lru
        restart: always
        ports:
            - "6379:6379"
        networks:
            - backend

    redis_stockPrices_cache:
        image: redis:latest
        container_name: redis_stockPrices_cache
        command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru
        restart: always
        ports:
            - "6383:6379"
        networks:
            - backend

    order_service1:
        build:
            context: .
            dockerfile: OrderService/Dockerfile
        volumes:
            - ./OrderService:/app
        ports:
            - "5201:5200"
        depends_on:
            matching_engine_service:
                condition: service_started
            mongo:
                condition: service_healthy
        environment:
            - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
            - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
            - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

    # order_service2:
    #     build:
    #         context: .
    #         dockerfile: OrderService/Dockerfile
    #     volumes:
    #         - ./OrderService:/app
    #     # ports:
    #     #     - "5202:5200"
    #     depends_on:
    #         matching_engine_service:
    #             condition: service_started
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
    #         - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
    #         - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    # order_service3:
    #     build:
    #         context: .
    #         dockerfile: OrderService/Dockerfile
    #     volumes:
    #         - ./OrderService:/app
    #     # ports:
    #     #     - "5203:5200"
    #     depends_on:
    #         matching_engine_service:
    #             condition: service_started
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
    #         - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
    #         - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    # order_service4:
    #     build:
    #         context: .
    #         dockerfile: OrderService/Dockerfile
    #     volumes:
    #         - ./OrderService:/app
    #     ports:
    #         - "5204:5200"
    #     depends_on:
    #         matching_engine_service:
    #             condition: service_started
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
    #         - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
    #         - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    # order_service5:
    #     build:
    #         context: .
    #         dockerfile: OrderService/Dockerfile
    #     volumes:
    #         - ./OrderService:/app
    #     ports:
    #         - "5205:5200"
    #     depends_on:
    #         matching_engine_service:
    #             condition: service_started
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
    #         - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
    #         - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    # order_service6:
    #     build:
    #         context: .
    #         dockerfile: OrderService/Dockerfile
    #     volumes:
    #         - ./OrderService:/app
    #     ports:
    #         - "5206:5200"
    #     depends_on:
    #         matching_engine_service:
    #             condition: service_started
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
    #         - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
    #         - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    # order_service7:
    #     build:
    #         context: .
    #         dockerfile: OrderService/Dockerfile
    #     volumes:
    #         - ./OrderService:/app
    #     ports:
    #         - "5207:5200"
    #     depends_on:
    #         matching_engine_service:
    #             condition: service_started
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
    #         - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
    #         - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    # order_service8:
    #     build:
    #         context: .
    #         dockerfile: OrderService/Dockerfile
    #     volumes:
    #         - ./OrderService:/app
    #     ports:
    #         - "5208:5200"
    #     depends_on:
    #         matching_engine_service:
    #             condition: service_started
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MATCHING_ENGINE_URL=http://matching_engine_service:5300/placeOrder
    #         - MATCHING_ENGINE_CANCELLATION_URL=http://matching_engine_service:5300/cancelOrder
    #         - MATCHING_ENGINE_STOCK_PRICES_URL=http://matching_engine_service:5300/getPrice
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    matching_engine_service:
        build:
            context: .
            dockerfile: MatchingEngineService/Dockerfile
        volumes:
            - ./MatchingEngineService:/app
        ports:
            - "5301:5300"
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

    matching_engine_service_2:
        build:
            context: .
            dockerfile: MatchingEngineService/Dockerfile
        volumes:
            - ./MatchingEngineService:/app
        ports:
            - "5302:5300" # Host:Container
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

    mongo:
        image: mongo:6.0
        container_name: mongo_db
        restart: always
        ports:
            - "27018:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: adminpassword
        networks:
            - backend
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
            interval: 10s
            timeout: 5s
            retries: 5

    auth_service1:
        build:
            context: ./AuthenticationServiceGolang
            dockerfile: dockerfile
        restart: always
        depends_on:
            - mongo
            - redis
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
            - REDIS_HOST=redis_cache
            - REDIS_PORT=6379
            - SECRET_KEY=your_secret
            - DB_NAME=authdb
        networks:
            - backend

    auth_service2:
        build:
            context: ./AuthenticationServiceGolang
            dockerfile: dockerfile
        restart: always
        depends_on:
            - mongo
            - redis
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
            - REDIS_HOST=redis_cache
            - REDIS_PORT=6379
            - SECRET_KEY=your_secret
            - DB_NAME=authdb
        networks:
            - backend

    auth_service3:
        build:
            context: ./AuthenticationServiceGolang
            dockerfile: dockerfile
        restart: always
        depends_on:
            - mongo
            - redis
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
            - REDIS_HOST=redis_cache
            - REDIS_PORT=6379
            - SECRET_KEY=your_secret
            - DB_NAME=authdb
        networks:
            - backend

    auth_service4:
        build:
            context: ./AuthenticationServiceGolang
            dockerfile: dockerfile
        restart: always
        depends_on:
            - mongo
            - redis
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
            - REDIS_HOST=redis_cache
            - REDIS_PORT=6379
            - SECRET_KEY=your_secret
            - DB_NAME=authdb
        networks:
            - backend

    auth_service5:
        build:
            context: ./AuthenticationServiceGolang
            dockerfile: dockerfile
        restart: always
        depends_on:
            - mongo
            - redis
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
            - REDIS_HOST=redis_cache
            - REDIS_PORT=6379
            - SECRET_KEY=your_secret
            - DB_NAME=authdb
        networks:
            - backend

    #
    # auth_service6:
    #     build:
    #         context: ./AuthenticationServiceGolang
    #         dockerfile: dockerfile
    #     restart: always
    #     depends_on:
    #         - mongo
    #         - redis
    #     environment:
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
    #         - REDIS_HOST=redis_cache
    #         - REDIS_PORT=6379
    #         - SECRET_KEY=your_secret
    #         - DB_NAME=authdb
    #     networks:
    #         - backend
    #
    # auth_service7:
    #     build:
    #         context: ./AuthenticationServiceGolang
    #         dockerfile: dockerfile
    #     restart: always
    #     depends_on:
    #         - mongo
    #         - redis
    #     environment:
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
    #         - REDIS_HOST=redis_cache
    #         - REDIS_PORT=6379
    #         - SECRET_KEY=your_secret
    #         - DB_NAME=authdb
    #     networks:
    #         - backend

    # auth_service8:
    #     build:
    #         context: ./AuthenticationServiceGolang
    #         dockerfile: dockerfile
    #     restart: always
    #     depends_on:
    #         - mongo
    #         - redis
    #     environment:
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
    #         - REDIS_HOST=redis_cache
    #         - REDIS_PORT=6379
    #         - SECRET_KEY=your_secret
    #         - DB_NAME=authdb
    #     networks:
    #         - backend

    # auth_service9:
    #     build:
    #         context: ./AuthenticationServiceGolang
    #         dockerfile: dockerfile
    #     restart: always
    #     depends_on:
    #         - mongo
    #         - redis
    #     environment:
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
    #         - REDIS_HOST=redis_cache
    #         - REDIS_PORT=6379
    #         - SECRET_KEY=your_secret
    #         - DB_NAME=authdb
    #     networks:
    #         - backend

    # auth_service10:
    #     build:
    #         context: ./AuthenticationServiceGolang
    #         dockerfile: dockerfile
    #     restart: always
    #     depends_on:
    #         - mongo
    #         - redis
    #     environment:
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo_db:27017/authdb?authSource=admin
    #         - REDIS_HOST=redis_cache
    #         - REDIS_PORT=6379
    #         - SECRET_KEY=your_secret
    #         - DB_NAME=authdb
    #     networks:
    #         - backend
    #

    locust:
        image: locustio/locust
        container_name: locust
        volumes:
            - ./load_tests:/mnt/locust
        ports:
            - "8089:8089"
        command: >
            -f /mnt/locust/locustfile.py --host=http://nginx:8080 --users 5000 --spawn-rate 500 --run-time 10m
        depends_on:
            - nginx
        networks:
            - backend

    portfolio_stock_service1:
        build:
            context: ./PortfolioStockService
        ports:
            - "5001:5000"
        volumes:
            - ./PortfolioStockService:/app
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

    # portfolio_stock_service2:
    #     build:
    #         context: ./PortfolioStockService
    #     # ports:
    #     #     - "5002:5000"
    #     volumes:
    #         - ./PortfolioStockService:/app
    #     depends_on:
    #         mongo:
    #             condition: service_healthy
    #     environment:
    #         - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
    #     networks:
    #         - backend

    portfolio_stock_service3:
        build:
            context: ./PortfolioStockService
        ports:
            - "5003:5000"
        volumes:
            - ./PortfolioStockService:/app
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

    portfolio_stock_service4:
        build:
            context: ./PortfolioStockService
        ports:
            - "5004:5000"
        volumes:
            - ./PortfolioStockService:/app
        depends_on:
            mongo:
                condition: service_healthy
        environment:
            - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/trading_system?authSource=admin
        networks:
            - backend

networks:
    backend:

volumes:
    mongodb_data:
